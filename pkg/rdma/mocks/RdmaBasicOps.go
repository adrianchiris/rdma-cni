// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	netlink "github.com/vishvananda/netlink"
)

// RdmaBasicOps is an autogenerated mock type for the RdmaBasicOps type
type RdmaBasicOps struct {
	mock.Mock
}

// GetRdmaDevicesForPcidev provides a mock function with given fields: pcidevName
func (_m *RdmaBasicOps) GetRdmaDevicesForPcidev(pcidevName string) []string {
	ret := _m.Called(pcidevName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(pcidevName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// RdmaLinkByName provides a mock function with given fields: name
func (_m *RdmaBasicOps) RdmaLinkByName(name string) (*netlink.RdmaLink, error) {
	ret := _m.Called(name)

	var r0 *netlink.RdmaLink
	if rf, ok := ret.Get(0).(func(string) *netlink.RdmaLink); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*netlink.RdmaLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RdmaLinkSetNsFd provides a mock function with given fields: link, fd
func (_m *RdmaBasicOps) RdmaLinkSetNsFd(link *netlink.RdmaLink, fd uint32) error {
	ret := _m.Called(link, fd)

	var r0 error
	if rf, ok := ret.Get(0).(func(*netlink.RdmaLink, uint32) error); ok {
		r0 = rf(link, fd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RdmaSystemGetNetnsMode provides a mock function with given fields:
func (_m *RdmaBasicOps) RdmaSystemGetNetnsMode() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RdmaSystemSetNetnsMode provides a mock function with given fields: newMode
func (_m *RdmaBasicOps) RdmaSystemSetNetnsMode(newMode string) error {
	ret := _m.Called(newMode)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(newMode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
